// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const office_addin_cli_1 = require("office-addin-cli");
const manifestInfo = require("./manifestInfo");
function getCommandOptionString(option, defaultValue) {
    // For a command option defined with an optional value, e.g. "--option [value]",
    // when the option is provided with a value, it will be of type "string", return the specified value;
    // when the option is provided without a value, it will be of type "boolean", return undefined.
    return (typeof (option) === "boolean") ? defaultValue : option;
}
function info(manifestPath) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const manifest = yield manifestInfo.readManifestFile(manifestPath);
            logManifestInfo(manifestPath, manifest);
        }
        catch (err) {
            office_addin_cli_1.logErrorMessage(err);
        }
    });
}
exports.info = info;
function logManifestInfo(manifestPath, manifest) {
    console.log(`Manifest: ${manifestPath}`);
    console.log(`  Id: ${manifest.id || ""}`);
    console.log(`  Name: ${manifest.displayName || ""}`);
    console.log(`  Provider: ${manifest.providerName || ""}`);
    console.log(`  Type: ${manifest.officeAppType || ""}`);
    console.log(`  Version: ${manifest.version || ""}`);
    if (manifest.alternateId) {
        console.log(`  AlternateId: ${manifest.alternateId}`);
    }
    console.log(`  AppDomains: ${manifest.appDomains ? manifest.appDomains.join(", ") : ""}`);
    console.log(`  Default Locale: ${manifest.defaultLocale || ""}`);
    console.log(`  Description: ${manifest.description || ""}`);
    console.log(`  High Resolution Icon Url: ${manifest.highResolutionIconUrl || ""}`);
    console.log(`  Hosts: ${manifest.hosts ? manifest.hosts.join(", ") : ""}`);
    console.log(`  Icon Url: ${manifest.iconUrl || ""}`);
    console.log(`  Permissions: ${manifest.permissions || ""}`);
    console.log(`  Support Url: ${manifest.supportUrl || ""}`);
    if (manifest.defaultSettings) {
        console.log("  Default Settings:");
        console.log(`    Requested Height: ${manifest.defaultSettings.requestedHeight || ""}`);
        console.log(`    Requested Width: ${manifest.defaultSettings.requestedWidth || ""}`);
        console.log(`    Source Location: ${manifest.defaultSettings.sourceLocation || ""}`);
    }
}
function modify(manifestPath, command) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            // if the --guid command option is provided without a value, use "" to specify to change to a random guid value.
            const guid = getCommandOptionString(command.guid, "");
            const displayName = getCommandOptionString(command.displayName);
            const manifest = yield manifestInfo.modifyManifestFile(manifestPath, guid, displayName);
            logManifestInfo(manifestPath, manifest);
        }
        catch (err) {
            office_addin_cli_1.logErrorMessage(err);
        }
    });
}
exports.modify = modify;
//# sourceMappingURL=commands.js.map